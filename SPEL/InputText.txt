[TEST] Comentarii
/* comentariu cu text intern
pe mai multe 
linii*/
/**/
//
[END]
[TEST] Predefined types variable declarations
int a;
float b;
char v;
string str;
bool bolean;
[END]
[TEST] Variable init
int a = 1;
float b = c;
float d = 1.0;
char v = 'a';
string str = "a";
bool bolean = true; 
[END]
[TEST] Const declarations
const int kst1=1;
const float kst2=1.1;
const char kst3=5;
const string kst4="kst4";
const int vkst[3] = [1, 3, 1]; //declarare size la const? 
const int _a=1;
[END]
[TEST] Functions declaration
begin int man(int a, int b) 
	return a+b*3;
end
begin int functie ()
	b=55*3/2;
	str="string1"+"string2";
end
[END]
[TEST] Class Declarations
//aceasta trebuie sa dea eroare daca este documentata
//begin class clasa1 
//end

begin class clasa2
//	begin int functie_clasa2() end;
//	functia vida da eroare
	begin void functie2() 
		char sir[]=['1', 'a', 2, '\4'];
		int a=health of hero;
	end
	begin void functie_void_cu_return()
//		return 4;
		float c=1.1;
	end
	//in declaratii la functii const nu trebuie sa fie initializat
	begin string functie_cu_return (string a, const char b[]) 
		return b[3];
//		const float vec[]=[1,4.5];
		const float vec[5]=[1,4.5];
	end
end
begin class clasa3
	begin void functie2() 
		char sir[]=['1', 'a', 2, '\4'];
	end
	int x;
	begin void functie_void_cu_return()
		float c=1.1;
	end
	bool variabila[]=[true, false];
end
[END]
[TEST] Class instantiation
clasa1 obj;
[END]
[TEST] Vector declarations
int a1[];
/*modificat declaratiile de la vector, le-am facut la fel ca declaratia de mai sus, sa fie consistenta */
float b1[];
char v1[];
string str1[];
bool bol1[];
clasa1 obj1[];
[END]
[TEST] Function calls
functie(a + a of obj);
functie(man(1+3));
functie(45);
functie(3+4, "7");
functie(kst1);
functie(a);
[END]
[TEST] Conditionals & Arithmetic
if (a && (b != 0)) beginif
	functie(1);
endif
else beginelse
	functie(1);
endelse
[END] 
[TEST] Loops
while (c >= 0 && (b!=0))
	int a=health of hero;
	string str1[1]=[3];
	functie(45);
endwhile
[END]
[TEST] For loops
for (x in 1:30) //for (int x=1; x<=30; x++)
	int b;
endfor
int x=functie(3);
for (x in str1) //for (auto:x in str1) - 
	int a=health[3] of hero;
	int a=health of hero[4];
	char f=4;
	functie(4);
	b=3/(health of hero[3]);
endfor
[END]
[TEST][SHOULD FAIL] List instantiation on a single unit
string str="string1"+"string2","asas";
[END] 
[TEST] Eval function
EVAL();
EVAL(a);
EVAL(3);
[END]
[TEST][SHOULD FAIL] Non-int eval function float
EVAL(3.0);
[END]
[TEST][SHOULD FAIL] Non-int eval function string
EVAL("str");
[END]
[TEST][SHOULD FAIL] Non-int eval function multiple param
EVAL(1, 2);
[END]
[TEST][SHOULD FAIL] Non-int eval function expression
EVAL(1 = 2);
[END]
//Testele de aici vor fi facute cand facem testing pentru semantic
int a; //trebuie sa dea eroare
a="4"; //eroare

int man(int a, int b){return 4;}//eroare, definita cu aceeasi signatura
man(b, 4);//eroare
Eval(4.5); //eroare