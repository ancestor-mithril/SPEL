[TEST] Null program
The tale begins
[END]
[TEST] Comentarii
The tale begins
/* comentariu cu text intern
pe mai multe 
linii*/
/**/
//
[END]
[TEST] Predefined types variable declarations
The tale begins
craft points a;
craft precise b;
craft rune v;
craft tome str;
craft absolute bolean;
[END]
[TEST] Variable init
The tale begins
craft points a = 1;
craft precise b = c;
craft precise d = 1.0;
craft rune v = 'a';
craft string str = "a";
craft absolute bolean = true; 
[END]
[TEST] Const declarations
The tale begins
craft artifact points kst1=1;
craft artifact precise kst2=1.1;
craft artifact rune kst3=5;
craft artifact tome kst4="kst4";
craft artifact points vkst[3] = [1, 3, 1]; //declarare size la const? 
craft artifact points _a=1;
[END]
[TEST] Functions declaration
The tale begins
begin points man(points a, points b) 
	return a+b*3;
end
begin points functie ()
	b=55*3/2;
	str="string1"+"string2";
end
[END]
[TEST] Class Declarations
The tale begins
//aceasta trebuie sa dea eroare daca este documentata
//I summon thy name clasa1 
//and thy brethren.

I summon thy name clasa2
//	begin points functie_clasa2() end;
//	functia vida da eroare
	begin void functie2() 
		craft rune sir[]=['1', 'a', 2, '\4'];
		craft points a=health of hero;
	end
	begin void functie_void_cu_return()
//		return 4;
		craft precise c=1.1;
	end
	//in declaratii la functii const nu trebuie sa fie initializat
	begin tome functie_cu_return (tome a, artifact rune b[]) 
		return b[3];
//		craft artifact precise vec[]=[1,4.5];
		craft artifact precise vec[5]=[1,4.5];
	end
and thy brethren.
I summon thy name clasa3
	begin void functie2() 
		craft rune sir[]=['1', 'a', 2, '\4'];
	end
	craft points x;
	begin void functie_void_cu_return()
		craft precise c=1.1;
	end
	craft absolute variabila[]=[true, false];
and thy brethren.
[END]
[TEST] Class instantiation
The tale begins
craft clasa1 obj;
[END]
[TEST] Vector declarations
The tale begins
craft points a1[];
craft precise b1[];
craft rune v1[];
craft tome str1[];
craft absolute bol1[];
craft clasa1 obj1[];
[END]
[TEST] Function calls
The tale begins
functie(a + a of obj);
functie(man(1+3));
functie(45);
functie(3+4, "7");
functie(kst1);
functie(a);
[END]
[TEST] Conditionals & Arithmetic
The tale begins
if (a && (b != 0)) beginif
	functie(1);
endif
else beginelse
	functie(1);
endelse
[END] 
[TEST] Loops
The tale begins
while (c >= 0 && (b!=0))
	craft points a=health of hero;
	craft tome str1[1]=[3];
	functie(45);
endwhile
[END]
[TEST] For loops
The tale begins
for (x in 1:30) //for (points x=1; x<=30; x++)
	craft points b;
endfor
craft points x=functie(3);
for (x in str1) //for (auto:x in str1) - 
	craft points a=health[3] of hero;
	craft points a=health of hero[4];
	craft rune f=4;
	functie(4);
	b=3/(health of hero[3]);
endfor
[END]
[TEST][SHOULD FAIL] List instantiation on a single unit
The tale begins
craft tome str="string1"+"string2","asas";
[END] 
[TEST] Eval function
The tale begins
EVAL();
EVAL(a);
EVAL(3);
[END]
[TEST][SHOULD FAIL] Non-int eval function float
The tale begins
EVAL(3.0);
[END]
[TEST][SHOULD FAIL] Non-int eval function string
The tale begins
EVAL("str");
[END]
[TEST][SHOULD FAIL] Non-int eval function multiple param
The tale begins
EVAL(1, 2);
[END]
[TEST][SHOULD FAIL] Non-int eval function expression
The tale begins
EVAL(1 = 2);
[END]
//Testele de aici vor fi facute cand facem testing pentru semantic
points a; //trebuie sa dea eroare
a="4"; //eroare

points man(points a, points b){return 4;}//eroare, definita cu aceeasi signatura
man(b, 4);//eroare
Eval(4.5); //eroare